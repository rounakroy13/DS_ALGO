A company has a list of expected revenues and payments for the upcoming year in chronological order. 
The problem is that at some moments in time the sum of previous payments can be larger than the total previous revenue, which would put the company in debt. 
To avoid this problem the company takes a very simple approach: it reschedules some expenses to the end of the year. 
You are given an array of integers, where positive numbers represent revenues and negative numbers represent expenses, all in chronological order. 
In one move you can relocate any expense (negative number) to the end of the array. 
What is the minimum number of such relocations to make sure that the company never falls into debt 
(in other words: you need to ensure that there is no consecutive sequence of elements starting from the beginning of the array, that sums up to a negative number)?

Here as some inputs and expected outputs

[10, -10, -1, -1, 10] => 1 because moving -10 to the end is enough

[-1, -1, -1, 1, 1, 1, 1] => 3 because we need to move the first three -1 to the end of the array

[5, -2, -3, 1] => 0 because there is no debt for these payments
